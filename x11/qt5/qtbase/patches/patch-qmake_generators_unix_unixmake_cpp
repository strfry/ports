$OpenBSD: patch-qmake_generators_unix_unixmake_cpp,v 1.2 2017/07/17 08:34:37 zhuk Exp $
1. Always prepend project directory to list of linking directories,
   to avoid picking up wrong library from system.
2. Try to avoid picking up system libraries instead of locally built ones.
3. Don't special case GNU make, BSD make isn't that bad, too.
4. Respect OpenBSD shared library naming rules.
5. Do not strip shared libraries.
Index: qmake/generators/unix/unixmake.cpp
--- qmake/generators/unix/unixmake.cpp.orig
+++ qmake/generators/unix/unixmake.cpp
@@ -48,7 +48,27 @@ ProStringList UnixMakefileGenerator::libdirToFlags(con
     return results;
 }
 
+// Helper for putting -L for in-build-tree directories first, all other arguments later;
+// avoids picking up system libraries instead of built ones.
 void
+UnixMakefileGenerator::separateInternalLibdirs(ProStringList &libs, ProStringList &libdirsInt, QString prefix) {
+    QFileInfo fi(project->cacheFile().isEmpty() ? project->buildRoot() : project->cacheFile());
+    QFileInfo fi2(fi.dir().path());
+    QDir dir(fi2.dir().path());
+    QString lbroot(prefix + (dir.isRoot() ? project->buildRoot() : dir.path()) + QDir::separator());
+    for (int i = 0; i < libs.size();) {
+        QString l(libs[i].toQString());
+        if (l.startsWith(lbroot)) {
+            if (!libdirsInt.contains(l))
+                libdirsInt += l;
+            libs.remove(i);
+        } else {
+            ++i;
+        }
+    }
+}
+
+void
 UnixMakefileGenerator::init()
 {
     ProStringList &configs = project->values("CONFIG");
@@ -109,6 +129,10 @@ UnixMakefileGenerator::init()
     if(!project->isEmpty("QMAKE_INCDIR"))
         project->values("INCLUDEPATH") += project->values("QMAKE_INCDIR");
     // The order of the next two lines is relevant due to side effect on QMAKE_LFLAGS.
+    QString destdir = project->first("DESTDIR").toQString();
+    if (destdir.isEmpty())
+        destdir = qmake_getpwd();
+    project->values("QMAKE_LIBDIR_FLAGS") += "-L" + destdir;   // will be escaped later
     ProStringList ldadd = project->values("QMAKE_LIBDIR_FLAGS") + libdirToFlags("QMAKE_LIBDIR");
     ProStringList ldaddpost = libdirToFlags("QMAKE_LIBDIR_POST");
     if (project->isActiveConfig("mac")) {
@@ -119,10 +143,19 @@ UnixMakefileGenerator::init()
         }
         ldadd += project->values("QMAKE_FRAMEWORKPATH_FLAGS");
     }
+
+    // Put -L for in-build-tree directories first, all other arguments later;
+    // avoids picking up system libraries instead of built ones.
     ProStringList &qmklibs = project->values("LIBS");
-    qmklibs = ldadd + qmklibs;
+    qmklibs += ldadd;
+    ProStringList libdirsInternal;
     ProStringList &qmklibspost = project->values("QMAKE_LIBS");
     qmklibspost = ldaddpost + qmklibspost;
+    separateInternalLibdirs(qmklibs, libdirsInternal, QStringLiteral("-L"));
+    separateInternalLibdirs(project->values("QMAKE_LIBS_PRIVATE"), libdirsInternal,
+QStringLiteral("-L"));
+    qmklibs = libdirsInternal + qmklibs;
+    qmklibspost = libdirsInternal + qmklibspost;
     if (!project->isEmpty("QMAKE_RPATHDIR") && !project->isEmpty("QMAKE_LFLAGS_RPATH")) {
         const ProStringList &rpathdirs = project->values("QMAKE_RPATHDIR");
         for (int i = 0; i < rpathdirs.size(); ++i) {
@@ -148,14 +181,17 @@ UnixMakefileGenerator::init()
         }
     }
     if (!project->isEmpty("QMAKE_RPATHLINKDIR")) {
-        const ProStringList &rpathdirs = project->values("QMAKE_RPATHLINKDIR");
+        ProStringList &rpathdirs = project->values("QMAKE_RPATHLINKDIR");
+        ProStringList rpathdirsInternal;
+        separateInternalLibdirs(rpathdirs, rpathdirsInternal, QString());
+        rpathdirs = rpathdirsInternal + rpathdirs;
         for (int i = 0; i < rpathdirs.size(); ++i) {
             if (!project->isEmpty("QMAKE_LFLAGS_RPATHLINK"))
                 project->values("QMAKE_LFLAGS") += var("QMAKE_LFLAGS_RPATHLINK") + escapeFilePath(QFileInfo(rpathdirs[i].toQString()).absoluteFilePath());
         }
     }
 
-    if(project->isActiveConfig("GNUmake") && !project->isEmpty("QMAKE_CFLAGS_DEPS"))
+    if(!project->isEmpty("QMAKE_CFLAGS_DEPS"))
         include_deps = true; //do not generate deps
 
     MakefileGenerator::init();
@@ -405,6 +441,9 @@ UnixMakefileGenerator::findLibraries(bool linkPrl, boo
                                            "QMAKE_LIBS", "QMAKE_LIBS_PRIVATE", nullptr };
     for (int i = 0; lflags[i]; i++) {
         ProStringList &l = project->values(lflags[i]);
+        ProStringList libdirsInt;
+        separateInternalLibdirs(l, libdirsInt, QStringLiteral("-L"));
+        l = libdirsInt + l;
         for (ProStringList::Iterator it = l.begin(); it != l.end(); ) {
             QString opt = (*it).toQString();
             if(opt.startsWith("-")) {
@@ -546,6 +585,13 @@ UnixMakefileGenerator::findLibraries(bool linkPrl, boo
             }
         }
     }
+    ProStringList libdirsInt;
+    for (int i = 0; lflags[i]; i++) {
+        ProStringList &l = project->values(lflags[i]);
+        separateInternalLibdirs(l, libdirsInt, QStringLiteral("-L"));
+    }
+    ProStringList &libs = project->values("QMAKE_LIBS");
+    libs = libdirsInt + libs;
     return false;
 }
 
@@ -589,6 +635,7 @@ UnixMakefileGenerator::defaultInstall(const QString &t
     } else if(project->first("TEMPLATE") == "app") {
         target = "$(QMAKE_TARGET)";
     } else if(project->first("TEMPLATE") == "lib") {
+        if(project->isEmpty("QMAKE_OPENBSD_SHLIB")) {
             if (!project->isActiveConfig("staticlib")
                     && !project->isActiveConfig("plugin")
                     && !project->isActiveConfig("unversioned_libname")) {
@@ -598,6 +645,7 @@ UnixMakefileGenerator::defaultInstall(const QString &t
                     links << "$(TARGET0)";
                 }
             }
+        }
     }
     for(int i = 0; i < targets.size(); ++i) {
         QString src = targets.at(i).toQString(),
@@ -674,6 +722,8 @@ UnixMakefileGenerator::defaultInstall(const QString &t
         } else if (project->first("TEMPLATE") == "lib" && project->isActiveConfig("staticlib")) {
             if(!project->isEmpty("QMAKE_RANLIB"))
                 ret += QString("\n\t$(RANLIB) ") + dst_targ;
+        } else if (project->first("TEMPLATE") == "lib") {
+            // do not strip shared libraries
         } else if (!project->isActiveConfig("debug_info") && !project->isActiveConfig("nostrip")
                    && !project->isEmpty("QMAKE_STRIP")) {
             ret += "\n\t-$(STRIP)";
